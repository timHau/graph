package graph

import (
	"reflect"
	"testing"
)

// Example Graph:
// .      4      ┌─────┐       8         ┌─────┐     7      ┌─────┐     9
// .  ┌──────────┤  1  ├─────────────────┤  2  ├────────────┤  3  ├─────────┐
// .  │          └──┬──┘                 └──┬─┬┘            └──┬──┘         │
// .  │             │                       │ │                │            │
// .  │             │                       │ │                │            │
// .  │             │                       │ │                │            │
// ┌──┴──┐          │         ┌─────┐     2 │ │       4        │         ┌──┴──┐
// │  0  │          │11   ┌───┤  8  ├───────┘ └──────────┐   14│         │  4  │
// └──┬──┘          │     │   └────┬┘                    │     │         └──┬──┘
// .  │             │     │        │                     │     │            │
// .  │             │     │7       │6                    │     │            │
// .  │             │     │        └────────┐            │     │            │
// .  │             │  ┌──┘                 │            └──┐  │            │
// .  │ 8        ┌──┴──┤         1       ┌──┴──┐     2      ├──┴──┐    10   │
// .  └──────────┤  7  ├─────────────────┤  6  ├────────────┤  5  ├─────────┘
// .             └─────┘                 └─────┘            └─────┘
// Solution Graph:
// .      4      ┌─────┐       8         ┌─────┐     7      ┌─────┐     9
// .  ┌──────────┤  1  ├─────────────────┤  2  ├────────────┤  3  ├─────────┐
// .  │          └─────┘                 └──┬─┬┘            └─────┘         │
// .  │                                     │ │                             │
// .  │                                     │ │                             │
// .  │                                     │ │                             │
// ┌──┴──┐                    ┌─────┐     2 │ │       4                  ┌──┴──┐
// │  0  │                    │  8  ├───────┘ └──────────┐               │  4  │
// └─────┘                    └─────┘                    │               └─────┘
// .                                                     │
// .                                                     │
// .                                                     │
// .                                                     └──┐
// .             ┌─────┐         1       ┌─────┐     2      ├─────┐
// .             │  7  ├─────────────────┤  6  ├────────────┤  5  │
// .             └─────┘                 └─────┘            └─────┘
func TestPrim(t *testing.T) {
	adjMat := []float64{
		0, 4, 0, 0, 0, 0, 0, 8, 0,
		4, 0, 8, 0, 0, 0, 0, 11, 0,
		0, 8, 0, 7, 0, 4, 0, 0, 2,
		0, 0, 7, 0, 9, 14, 0, 0, 0,
		0, 0, 0, 9, 0, 10, 0, 0, 0,
		0, 0, 4, 14, 10, 0, 2, 0, 0,
		0, 0, 0, 0, 0, 2, 0, 1, 6,
		8, 11, 0, 0, 0, 0, 1, 0, 7,
		0, 0, 2, 0, 0, 0, 6, 7, 0,
	}
	g, err := FromAdjMat(adjMat)
	if err != nil {
		t.Errorf("expected no error, got %v", err)
	}

	mst := g.Prim()
	expected := AdjList{
		0: []WeightTuple{{1, 4}},
		1: []WeightTuple{{2, 8}},
		2: []WeightTuple{{3, 7}, {5, 4}, {8, 2}},
		3: []WeightTuple{{4, 9}},
		4: []WeightTuple{},
		5: []WeightTuple{{6, 2}},
		6: []WeightTuple{{7, 1}},
		7: []WeightTuple{},
		8: []WeightTuple{},
	}

	if !reflect.DeepEqual(mst.AdjacencyList, expected) {
		t.Errorf("expected %v, got %v", expected, mst.AdjacencyList)
	}
}
